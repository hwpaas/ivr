{
  "name": "plivode",
  "version": "0.2.2",
  "description": "A lightweight scalable Plivo application framework.",
  "author": {
    "name": "Joe Lynch",
    "email": "yhf@ncsc.io"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/joeblynch/plivode.git"
  },
  "main": "./lib",
  "dependencies": {
    "express": "2.5.x",
    "compose": "0.1.x",
    "base62": "0.1.x",
    "underscore": "1.3.x"
  },
  "engine": "node >= 0.8.x",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-buster": "~0.3.0",
    "grunt-contrib-jshint": "~0.7.1",
    "sinon": "~1.7.3"
  },
  "readme": "#Plivode\n\nPlivode is a lightweight scalable application framework for creating [Plivo](http://www.plivo.com) apps with NodeJS.\n\n## Installing\n    npm install plivode\n\n## Getting Started\n\nLet's run through a few examples to see how Plivode works.\n\n### Example: Hello, World!\n\n```javascript\nvar plivode = require('plivode');\n\nnew plivode.App({\n   appID: '[your Plivo app ID]',\n   authID: '[your Plivo auth ID]',\n   authToken: '[your Plivo auth token]',\n   rootUrl: '[the root URL this app is accessible by Plivo]'\n})\n.on('answer', function(params, response) {\n   response\n       .speak('Hello, world!')\n       .send();\n});\n```\n\nIt doesn't get much simpler than this! Here we create a new Plivode app, which will answer any received phone calls with \"Hello, world!\"\n\nPlivode makes use of [Express](http://www.expressjs.com) to run a web server for receiving messages from Plivo.\n\nSimply specify the URL of your server, and make sure the port you specify is accesible to the outside world. For example,\nif your Plivode app is running on port 1919 of plivode-app.example.com, you'd pass: `rootUrl: 'http://plivode-app.example.com:1919'`\n\n\n### Application Events\n\nYour Plivode app will raise events when you need to respond to a phone call or sms message. The standard Plivo events are:\n\n - `answer` - raised when a call is received by any of the phone numbers associated with your app.\n - `message` - raised when a sms message is received by any of the phone numbers associated with your app.\n - `hangup` - raised when a call is ended.\n\n\n### Example: Parrot\n\n**See it in action! Send a sms to `(949) 484-8425`. Within a few seconds you'll get a call speaking your message.**\n\n```javascript\nvar plivode = require('plivode');\n\nnew plivode.App({\n    appID: '[your Plivo app ID]',\n    authID: '[your Plivo auth ID]',\n    authToken: '[your Plivo auth token]',\n    rootUrl: '[the root URL this app is accessible by Plivo]'\n})\n.on('message', function(params, response) {\n    // When a sms is received, make an outbound call to the number that sent the sms,\n    // passing the text of the sms to the \"parrot\" action.\n    this.Call.outbound('[your Plivo phone number]', params.From, ['parrot', params.Text]);\n\n    // Send a blank response back, so Plivo knows we processed the message and not to resend it.\n    response.send();\n})\n.on('parrot/:message', function(params, response) {\n    // The user answered the return call, so speak the text of the sms that they sent, and repeat it 3 times.\n    response\n        .speak(params.message, { loop: 3 })\n        .send();\n});\n```\n\nHere we listen for sms messages, and when one is received we call the number back and speak the message 3 times.\n\nPlivode provides support for the entire Plivo REST API. Here we use `Call.outbound` to make the call.\n\nNotice that we specify the custom event `parrot/:message`. This event is raised when the outbound call is answered.\nSince event names map directly to [Express](http://www.expressjs.com) routes, we're able to use Express' powerful\nrouting engine to specify parameters within the event name.\n\nWhen we make the outbound call, we pass in the action route `['parrot', params.Text]`. The first field of your route must\nbe the event name, and the remaining fields can be parameters to pass to the next step of the call. If you don't need to\npass along parameters you can simply pass the event name as a string.\n\n\n### Example: Guess the Number\n\n**See it in action! Call `(949) 484-8425`.**\n\nPick a number between 1 and 100, and the app will try to guess it. If you're thinking of a lower number press `*`; higher press `#`;\nand if the guess is correct press `0`.\n\n```javascript\nvar plivode = require('plivode');\n\nnew plivode.App({\n    appID: '[your Plivo app ID]',\n    authID: '[your Plivo auth ID]',\n    authToken: '[your Plivo auth token]',\n    rootUrl: '[the root URL this app is accessible by Plivo]'\n})\n.on('answer', function(params, response) {\n    console.log('answered call from: ' + params.From);\n\n    var MIN_GUESS = 1,\n        MAX_GUESS = 100,\n        guess = MIN_GUESS + Math.round(Math.random() * (MAX_GUESS - MIN_GUESS));\n\n    response.speak('Pick a number between one and one hundred')     // Spelling out 100, otherwise speak pronounces it \"1-o-o\".\n        .wait(3)\n        .speak(\"I'm guessing it's \" + guess)\n        .getDigits({\n            action: ['guess', MIN_GUESS, MAX_GUESS, guess],\n            numDigits: 1,\n            validDigits: '*#0',\n            finishOnKey: '123456789',\n            timeout: 45\n        }, function() {\n            response.speak(\"If the number you're thinking of is lower than \" + guess + \", press star; \" +\n                \"if it's higher press pound; and if it's correct press 0.\")\n        })\n        .speak(\"I didn't catch that. Goodbye.\")\n        .send();\n})\n.on('guess/:min/:max/:guess', function(params, response) {\n    var min = parseInt(params.min, 10),\n        max = parseInt(params.max, 10),\n        guess = parseInt(params.guess, 10),\n        newGuess,\n        direction;\n\n    // Look at what digit the user pressed to determine how to guess next, or if we guessed right.\n    switch (params.Digits) {\n        case '*':\n            direction = 'lower';\n            max = guess - 1;\n            break;\n        case '#':\n            direction = 'higher';\n            min = guess + 1;\n            break;\n        case '0':\n            console.log(params.From + ': ' + guess + ' was correct!');\n            response\n                .speak('Hooray! Thanks for playing. Goodbye.')\n                .send();\n            return;\n    }\n\n    if (min > max) {\n        // The user told us the number is higher than the min, and less than the max, no compute.\n        response\n            .speak(\"I've run out of numbers. Goodbye.\")\n            .send();\n        return;\n    } else if (max === min) {\n        // We've narrowed it down to one number\n        newGuess = min;\n    } else {\n        // We could just do a binary search and guess right in the middle, but\n        // let's add a bit of randomness to make things a bit less predictable.\n        var randomnessAmount = Math.round((max - min) * 0.2),\n        random = Math.random() * randomnessAmount - randomnessAmount / 2;\n\n        newGuess = Math.round((max + min - randomnessAmount) / 2 + random);\n    }\n\n    // Pick a random start to the question to add some variability.\n    var questions = ['How about ', 'Is it ', 'Perhaps ', 'Could it be '],\n        question = questions[Math.floor(Math.random() * questions.length)] + newGuess + '?';\n\n    console.log([params.From,  ': The number is ', direction,  ' than ' + guess, '. ', question].join(''));\n\n    // Ask the user again.\n    response\n        .getDigits({\n            action: ['guess', min, max, newGuess],\n            numDigits: 1,\n            validDigits: '*#0',\n            finishOnKey: '123456789',\n            timeout: 45\n        }, function() {\n            response.speak(question)\n        })\n        .speak(\"I didn't catch that. Goodbye.\")\n        .send();\n})\n.on('hangup', function(params) {\n    console.log('call ended with: ' + params.From);\n    console.log(params);\n});\n```\n\n## Documentation\n\nMore documentation is on the way! For now, partial documentation is [available here](http://plivode.ncsc.io).",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/joeblynch/plivode/issues"
  },
  "homepage": "https://github.com/joeblynch/plivode",
  "_id": "plivode@0.2.2",
  "_from": "plivode@"
}
