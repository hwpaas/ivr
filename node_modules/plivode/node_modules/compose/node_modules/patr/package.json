{
  "name": "patr",
  "author": {
    "name": "Kris Zyp"
  },
  "description": "Promise-based asynchronous test runner",
  "version": "0.2.5",
  "contributors": [],
  "keywords": [
    "test",
    "promise"
  ],
  "licenses": [
    {
      "type": "AFLv2.1",
      "url": "http://trac.dojotoolkit.org/browser/dojo/trunk/LICENSE#L43"
    },
    {
      "type": "BSD",
      "url": "http://trac.dojotoolkit.org/browser/dojo/trunk/LICENSE#L13"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/kriszyp/patr"
  },
  "mappings": {
    "promised-io": "http://github.com/kriszyp/promised-io/zipball/v0.2.3"
  },
  "githubName": "patr",
  "type": "zip",
  "location": "http://github.com/kriszyp/patr/zipball/master",
  "dependencies": {
    "promised-io": "0.2.3"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib",
  "icon": "http://packages.dojofoundation.org/images/persvr.png",
  "readme": "Promised-based Asynchronous Test Runner (patr) is a very simple, easy-to-use test\nrunner that support asynchronous JavaScript testing with promises. Patr is based on\nthe premise that testing should be as simple as creating an object with\nmethods to perform tests. Objects can be nested to create subgroups of tests.\nPatr relies on the system's \"assert\" module for making assertions. An example test:\n\n    var assert = require(\"assert\");\n    require(\"patr/runner\").run({testMath: function(){\n      assert.equal(3, Math.min(3, 5));\n    });\n\nThe suggested pattern for writing test files is to define the tests on the\nexports object and running the test runner if the module is the main module.\nThis allows for direct execution of test files and easy inclusion of tests\ninto other test groups. For example, we could define \"my-math-test.js\":\n\n    var assert = require(\"assert\");\n    exports.testMath = function(){\n      assert.equal(3, Math.min(3, 5));\n    };\n    \n    if(require.main == module)\n      require(\"patr/runner\").run(exports);\n\nNow we can directly execute \"my-math-test.js\" or we could include it in another\ntest file:\n\n    exports.mathTests = require(\"my-math-test\");\n    exports.otherTests = require(\"other-tests\");\n    \n    if(require.main == module)\n      require(\"patr/runner\").run(exports);\n\nWith these aggregate test module, each test file's tests are included in a nested object\nthat will be tested as a subgroup of tests.\n\nUsing Promises for Asynchronous Testing\n==========================\n\nPromises make asynchronous testing very simple. You simply return a promise from \nyour test to indicate when a test is completed. When using promise-based coding this\nis super simple. For example, to test the contents of file loaded asynchronously using\npromised-io's fs module:\n\n    var fs = require(\"promised-io/fs\");\n\n    exports.testFile = function(){\n      return fs.readFile(\"testfile\").then(function(contents){\n        assert.equal(contents.toString(), \"expected contents\");\n      });\n    };\n    ...\n\nAsynchronous assert module\n======================\n\nPatr includes an \"assert\" module (patr/assert) that is upgraded for promise-based asynchronous\ncode blocks. In particular, the \"throws\" method can be used to enforce that a code block\nwill eventually throw (or reject) even if it happens asynchronously. For example:\n\n    var assert = require(\"patr/assert\");\n    exports.testFile = function(){\n      return assert.throws(function(){\n        // asserts that this must throw/reject eventually\n        return fs.readFile(\"non-existent file\");\n      });\n    };\n\n\nAdvanced Testing\n============\n\nYou can include additional testing options by setting flags on the test objects (that have the test functions).\nThe test object can have the following properties:\n\n* iterations - The number of times to execute the test\n\nThese properties are inherited, if they are set by a parent object, than the children\nobjects will inherit the behavior unlesss it is overriden.\n\nThese properties can also be set from the command line. This is done by including\n-name value arguments when starting the test module. For example:\n\n    nodules test.js -iterations 1000\n\n\nPatr is part of the Persevere project, and therefore is licensed under the\nAFL or BSD license. The Persevere project is administered under the Dojo foundation,\nand all contributions require a Dojo CLA.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/kriszyp/patr/issues"
  },
  "homepage": "https://github.com/kriszyp/patr",
  "_id": "patr@0.2.5",
  "_from": "patr@0.2.5"
}
